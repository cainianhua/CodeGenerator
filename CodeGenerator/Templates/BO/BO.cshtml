@using CodeGenerator
@using CodeGenerator.VO
/*
 * Code Generator v1.0
 * @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using @(Model.Namespace).DAO;
using @(Model.Namespace).VO;

@{
    bool hasIdentityRow = Model.Columns[0].IsIdentity;
}
namespace @(Model.Namespace).BO 
{
    public class @(Model.NameS)BO : BaseBO 
    {
        private I@(Model.NameS)Provider provider;
        private static @(Model.NameS)BO instance;

        private @(Model.NameS)BO() {
            provider = (I@(Model.NameS)Provider)this.CreateProvider("@(Model.NameS)");
        }

        public static @(Model.NameS)BO GetInstance() {
            if (instance == null) {
                instance = new @(Model.NameS)BO();
            }
            return instance;
        }

        public List<@(Model.NameS)VO> GetItems() {
            return provider.GetItems();
        }

@if ( Model.PKs.Count > 0 ) {
    @(string.Format(@"
        public {0}VO GetItem( {1} ) {{
            return provider.GetItem( {2} );
        }}

        public void DeleteItem( {1} ) {{
            provider.DeleteItem( {2} );
        }}", Model.NameS, TemplateUtils.GetMethodParameters( Model.PKs ), TemplateUtils.GetMethodCallParameters( Model.PKs )))
}

@foreach ( ColumnVO item in Model.FKs ) {
    @(string.Format(@"
        public List<{0}VO> GetItemsBy{3}( {1} ) {{
            return provider.GetItemsBy{3}( {2} );
        }}

        public void DeleteItemsBy{3}( {1} ) {{
            provider.DeleteItemsBy{3}( {2} );
        }}", Model.NameS, TemplateUtils.GetMethodParameter( item ), TemplateUtils.GetMethodCallParameter( item ), item.Name ))
}

@foreach ( ColumnVO item in Model.UKs ) {
    @(string.Format(@"
        public {0}VO GetItemBy{3}( {1} ) {{
            return provider.GetItemBy{3}( {2} );
        }}

        public void DeleteItemBy{3}( {1} ) {{
            provider.DeleteItemBy{3}( {2} );
        }}", Model.NameS, TemplateUtils.GetMethodParameter( item ), TemplateUtils.GetMethodCallParameter( item ), item.Name ))
}


        public @(hasIdentityRow ? "int" : "void") SaveOrUpdateItem( @(Model.NameS)VO item ) {
@if ( hasIdentityRow ) {
            <text>if ( item == null ) return -1;
            return provider.SaveOrUpdateItem( item );</text>
}
else {
            <text>if ( item == null ) return;
            provider.SaveOrUpdateItem( item );
            </text>
}

        }
    }
}