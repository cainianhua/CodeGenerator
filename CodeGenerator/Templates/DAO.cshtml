@using CodeGenerator
@using CodeGenerator.VO
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using CodeGenerator.VO;

namespace CodeGenerator.DAO.SqlServer {
    internal class @(Model.NameSingular)Provider : ProviderBase, I@(Model.NameSingular)Provider {
    #region SQLs
    @if ( Model.PKs.Count > 0 ) {
        @(string.Format( @"
        private const string SQL_GET_{0}_PK = ""SELECT * FROM {1} WHERE {2}"";
        private const string SQL_DELETE_{0}_PK = ""DELETE FROM {1} WHERE {2}"";", Model.Name.ToUpper(), Model.Name, TemplateUtils.GetSQLWhereAnd( Model.PKs ) ))
    }
    @if ( Model.FKs.Count > 0 ) {
        @(string.Format( @"
        private const string SQL_GET_{0}_FK = ""SELECT * FROM {1} WHERE {2}"";
        private const string SQL_DELETE_{0}_FK = ""DELETE FROM {1} WHERE {2}"";", Model.Name.ToUpper(), Model.Name, TemplateUtils.GetSQLWhereAnd( Model.FKs ) ))
    }
    @if ( Model.UKs.Count > 0 ) {
        @(string.Format( @"
        private const string SQL_GET_{0}_UK = ""SELECT * FROM {1} WHERE {2}"";
        private const string SQL_DELETE_{0}_UK = ""DELETE FROM {1} WHERE {2}"";", Model.Name.ToUpper(), Model.Name, TemplateUtils.GetSQLWhereAnd( Model.UKs ) ))
    }
    #endregion

    #region Fields
    @foreach ( ColumnVO item in Model.Columns ) {
        @(string.Format( "\t\tprivate const string FIELD_{0} = \"{1}\";", item.Name.ToUpper(), item.Name ))
    }
    #endregion

    #region Methods
    @if ( Model.PKs.Count > 0 ) {
        @(string.Format( @"
        public List<{0}VO> GetItemsByPK({1}) {{
            SqlParameter[] p = {3};
            return GetSQLResults( SQL_GET_{2}_PK, p);
        }}

        public void DeleteItemsByPK({1}) {{
            SqlParameter[] p = {3};
            SqlHelper.ExecuteNonQuery(dbConnectionString, CommandType.Text, SQL_DELETE_{2}_PK, p);
        }}
        ", Model.NameSingular, TemplateUtils.GetMethodParameters( Model.PKs ), Model.Name.ToUpper(), TemplateUtils.GetSQLParameters( Model.PKs )))
    }
    @if ( Model.FKs.Count > 0 ) {
        @(string.Format( @"
        public List<{0}VO> GetItemsByFK({1}) {{
            SqlParameter[] p = {3};
            return GetSQLResults( SQL_GET_{2}_FK, p);
        }}

        public void DeleteItemsByFK({1}) {{
            SqlParameter[] p = {3};
            SqlHelper.ExecuteNonQuery(dbConnectionString, CommandType.Text, SQL_DELETE_{2}_FK, p);
        }}", Model.NameSingular, TemplateUtils.GetMethodParameters( Model.FKs ), Model.Name.ToUpper(), TemplateUtils.GetSQLParameters( Model.FKs )))
    }
    @if ( Model.UKs.Count > 0 ) {
        @(string.Format( @"
        public List<{0}VO> GetItemsByPK({1}) {{
            SqlParameter[] p = {3};
            return GetSQLResults( SQL_GET_{2}_UK, p);
        }}
        
        public void DeleteItemsByUK({1}) {{
            SqlParameter[] p = {3};
            SqlHelper.ExecuteNonQuery(dbConnectionString, CommandType.Text, SQL_DELETE_{2}_UK, p);
        }}", Model.NameSingular, TemplateUtils.GetMethodParameters( Model.UKs ), Model.Name.ToUpper(), TemplateUtils.GetSQLParameters( Model.UKs )))
    }
    
    public void SaveOrUpdateItem(@(Model.NameSingular)VO item) {
        SqlParameter[] p = @(TemplateUtils.GetSQLParameters(Model.Columns));
        SqlHelper.ExecuteScale(dbConnectionString, CommandType.StoredProcedure, USP_SAVE_ITEM, p);
    }
    #endregion

    #region Helpers
    private GetSQLResults(string sql, SqlParameter[] p) {
        List<@(Model.NameSingular)VO> entities = new List<@(Model.NameSingular)VO>();
        IDataReader reader = null;

        try {
            reader = SqlHelper.ExecuteReader( dbConnectionString, CommandType.Text, sql, p );
            while (reader.Read()) {
                entities.Add( Load@(Model.NameSingular)( reader ) );
            }
        }
        finally {
            if (reader != null && !reader.IsClosed)
                reader.Close();
            }
        }
        return entities;
    }

    private Load@(Model.NameSingular)(IDataReader reader) {
        @Model.NameSingular item = new @Model.NameSingular();
    @foreach ( ColumnVO c in Model.Columns ) {
        @(string.Format(@"\t\titem.{0} = Read{1}( reader, FIELD_{2} );", c.Name, c.ClrTypeName, c.Name.ToUpper()))
    }
    }
    #endregion
